options {
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  STATIC = false;
}

PARSER_BEGIN(MyParser)

package edu.curtin.terminalgriddemo.eventparser;
import edu.curtin.terminalgriddemo.PluginObject;
import edu.curtin.terminalgriddemo.Event;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.*;

public class MyParser {
    public static void main(String[] args) {

        MyParser parser = new MyParser(System.in);
          try {
                parser.EventList();
            } catch (ParseException e) {
                System.err.println("Parsing error: " + e.getMessage());
            }
    }
}

PARSER_END(MyParser)

TOKEN: {
  < DATE : (["0"-"9"])+ "-" (["0"-"9"])+ "-" (["0"-"9"])+ >
| < EVENT : "event">
| < ALL_DAY : "all-day">
| < PLUGIN : "plugin">
| < SCRIPT : "script">
| < TIME : (["0"-"9"])+ ":" (["0"-"9"])+ ":" (["0"-"9"])+ >
| < NUMBER: (["0"-"9"])+ >
| < STRING_LITERAL: "\"" (~["\""])* "\"" >
| < TEXT : (["a"-"z", "A"-"Z", "0"-"9", "." ])+ >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < COLON: ":" >
| < COMMA: "," >
| < SPACES : ("\r\n" | "\n" | " ")*>
}

public Map<String, Object> EventList() :
{
 Map<String, Object> outputMap = new HashMap<String, Object>();

 Event event = null;
 ArrayList<Event> events = new ArrayList<Event>();

PluginObject plugin = null;
 ArrayList<PluginObject> plugins = new ArrayList<PluginObject>();

}
{
 (event = Event() {events.add(event); }| plugin = Plugin() {plugins.add(plugin);} | Script() | <SPACES>)*

{
    outputMap.put("events", events);
    outputMap.put("plugins", plugins);

    return outputMap;
}

}

private Event Event() :
{
   String date = null;
   String time = null;
   String duration = null;
   String title = null;
}
{

    "event" <SPACES> <DATE>{ date = token.image; } <SPACES> (<TIME> { time = token.image; } <SPACES> <NUMBER>{ duration = token.image; } <SPACES> <STRING_LITERAL>{ title = token.image.substring(1, token.image.length() - 1); }
    {

        return new Event(LocalDate.parse(date), LocalTime.parse(time), Integer.parseInt(duration), title);
}|

    <ALL_DAY> <SPACES> <STRING_LITERAL>{ title = token.image.substring(1, token.image.length() - 1); }
    {
                 return new Event(LocalDate.parse(date), title);
})

}

private PluginObject Plugin() :
{
  String pluginName = null;
  String[] propertyArray;
  Map<String, String> properties = new HashMap<String, String>();
}
{
    "plugin" <SPACES> <TEXT> {pluginName = token.image;} <SPACES> <LBRACE> <SPACES> (propertyArray = Property() { properties.put(propertyArray[0], propertyArray[1]); })* <RBRACE>

  {
    return new PluginObject(pluginName, properties);
  }
}

private String[] Property() :
{
  String key = null;
  String value = null;
  String[] propertyArray = new String[2];
}
{
 <TEXT>{ key = token.image; }  <COLON> <SPACES ><STRING_LITERAL>{ value = token.image.substring(1, token.image.length() - 1); }( <COMMA> )?(<SPACES>)?

  {
    propertyArray[0] = key;
    propertyArray[1] = value;

    return propertyArray;
  }
}

void Script() :
{}
{
    "script" <SPACES> <STRING_LITERAL>

}